@import "tailwindcss";
@plugin "@tailwindcss/typography";

@variant dark (&:where(.dark, .dark *));

@font-face {
  font-family: "Literata Variable";
  font-style: normal;
  font-display: swap;
  font-weight: 200 900;
  src: url(https://cdn.jsdelivr.net/fontsource/fonts/literata:vf@latest/latin-opsz-normal.woff2)
    format("woff2-variations");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+20AC, U+2122, U+2191,
    U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@font-face {
  font-family: "press-start-2p";
  font-style: normal;
  font-display: swap;
  font-weight: 400;
  src: url(https://cdn.jsdelivr.net/fontsource/fonts/press-start-2p@latest/latin-400-normal.woff2)
      format("woff2"),
    url(https://cdn.jsdelivr.net/fontsource/fonts/press-start-2p@latest/latin-400-normal.woff)
      format("woff");
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA,
    U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+20AC, U+2122, U+2191,
    U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}

@theme {
  --font-mono: "IBM Plex Mono", ui-monospace, monospace;
  --font-display: "IBM Plex Mono", ui-monospace, monospace;
  --font-serif: "IBM Plex Mono", ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
  --color-theme-dark: var(--color-neutral-900);
  --color-theme-dark-opaque: oklch(from var(--color-neutral-900) l c h / 0.5);
  --color-theme-light: var(--color-neutral-100);
  --color-theme-light-opaque: oklch(from var(--color-neutral-100) l c h / 0.5);
  --color-theme-dark-muted: var(--color-neutral-600);
  --color-theme-light-muted: var(--color-neutral-400);
  --color-theme-accent-light: var(--color-emerald-400);
  --color-theme-accent-light-muted: var(--color-emerald-300);
  --color-theme-accent-dark: var(--color-emerald-600);
  --color-theme-accent-dark-muted: var(--color-emerald-800);
}

@layer base {
  :root {
    --theme-stroke: 2px;
    --theme-offset: 6px;
    --theme-transition-duration: 0.15s;
    --theme-transition-timing-function: ease-in-out;
  }
  
  html {
    min-height: 100vh;
  }

  ::selection {
    background-color: var(--color-theme-accent-light);
    color: var(--color-theme-dark-muted);
  }

  .theme-transition {
    @media (prefers-reduced-motion: no-preference) {
      transition:
        background-color var(--theme-transition-duration) var(--theme-transition-timing-function),
        color var(--theme-transition-duration) var(--theme-transition-timing-function),
        fill var(--theme-transition-duration) var(--theme-transition-timing-function),
        border-color var(--theme-transition-duration) var(--theme-transition-timing-function),
        transform var(--theme-transition-duration) var(--theme-transition-timing-function);
    }
  }

  .theme-bg {
    background-color: var(--color-theme-light);
    :where(.dark, .dark *) & {
      background-color: var(--color-theme-dark);
    }
  }

  .-theme-bg {
    background-color: var(--color-theme-dark);
    :where(.dark, .dark *) & {
      background-color: var(--color-theme-light);
    }
  }
  .-theme-muted-bg {
    background-color: var(--color-theme-dark-muted);
    :where(.dark, .dark *) & {
      background-color: var(--color-theme-light-muted);
    }
  }
  
  .theme-text {
    color: var(--color-theme-dark);
    :where(.dark, .dark *) & {
      color: var(--color-theme-light);
    }
  }

  .-theme-text {
    color: var(--color-theme-light);
    :where(.dark, .dark *) & {
      color: var(--color-theme-dark);
    }
  }

  .theme-muted {
    color: var(--color-theme-dark-muted);
    :where(.dark, .dark *) & {
      color: var(--color-theme-light-muted);
    }
  }

  .theme-fill {
    fill: var(--color-theme-dark);
    :where(.dark, .dark *) & {
      fill: var(--color-theme-light);
    }
  }

  .theme-text-muted {
    color: var(--color-theme-dark-muted);
    :where(.dark, .dark *) & {
      color: var(--color-theme-light-muted);
    }
  }

  .theme-border-b {
    border-bottom: var(--theme-stroke) solid;
    border-color: var(--color-theme-dark);
    :where(.dark, .dark *) & {
      border-color: var(--color-theme-light);
    }
  }

  .theme-offset {
    text-underline-offset: var(--theme-offset);
  }

  .opsz {
    font-variation-settings: "opsz" 72;
  }

  .hero-image {
    width: 180px;
    height: 180px;
    border-radius: 50%;
    object-fit: cover;
    filter: grayscale(100%);
    border: 2px solid var(--color-theme-dark);
    transition: filter 0.3s ease;
  }
  
  .hero-image:hover {
    filter: grayscale(100%);
  }
  
  :where(.dark, .dark *) .hero-image {
    border-color: var(--color-theme-light);
  }
  
  .cv-item-1 {
    list-style-type: disc;
    text-indent: -1.5rem;
    padding-left: 1.5rem;
  }
  
  .cv-item-2 {
    list-style-type: "- ";
  }
  
  .cv-item-3 {
    list-style-type: circle;
  }

  .cursor-blink {
    animation: blink 10s infinite;
  }
  
  @keyframes blink {
    0%, 10% { opacity: 1; }
    11%, 20% { opacity: 0; }
    21%, 30% { opacity: 1; }
    31%, 40% { opacity: 0; }
    41%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  .hover-underline {
    position: relative;
    text-decoration: none;
    display: inline-block;
  }

  .hover-underline::after {
    content: '';
    position: absolute;
    bottom: var(--underline-bottom, -2px);
    left: 0;
    width: 0;
    height: 2px;
    background-color: currentColor;
    transition: width 0.3s ease;
  }

  .hover-underline:hover::after {
    width: 100%;
  }

  .hover-underline.nav {
    --underline-bottom: -4px;
  }

  .hover-underline.nav.active::after {
    width: 100%;
  }

  .hover-underline.anchor {
    --underline-bottom: -2px;
  }

  .hover-unmute {
    color: var(--color-theme-dark-muted);
    :where(.dark, .dark *) & {
      color: var(--color-theme-light-muted);
    }
    fill: var(--color-theme-dark-muted) !important;
    :where(.dark, .dark *) & {
      fill: var(--color-theme-light-muted) !important;
    }
  }

  .hover-unmute:hover {
    color: var(--color-theme-dark);
    :where(.dark, .dark *) & {
      color: var(--color-theme-light);
    }
    fill: var(--color-theme-dark) !important;
    :where(.dark, .dark *) & {
      fill: var(--color-theme-light) !important;
    }
  }

  .link-hover.pagefind-link {
    --underline-bottom: 0px;
  }

  .tag {
    @apply px-2 py-1 text-sm font-semibold opacity-80 hover:opacity-90 cursor-pointer;
    position: relative;
    color: var(--color-theme-light);
    background-color: var(--color-theme-dark-muted);
    box-shadow: none;
    transition: all 0.2s ease,
                background-color var(--theme-transition-duration) var(--theme-transition-timing-function),
                color var(--theme-transition-duration) var(--theme-transition-timing-function);
  }

  .tag:hover {
    transform: translate(-1px, -1px);
    box-shadow: 2px 2px 0 0 var(--color-theme-accent-light);
  }

  :where(.dark, .dark *) .tag {
    color: var(--color-theme-dark);
    background-color: var(--color-theme-light-muted);
  }

  .theme-toggle {
    @apply w-3 h-3 rounded-full cursor-pointer hover:scale-110 transition-transform duration-200;
    background-color: var(--color-theme-dark);
  }

  :where(.dark, .dark *) .theme-toggle {
    background-color: var(--color-theme-light);
  }

  /* Inline code styling */
  code {
    @apply px-1.5 py-0.5 text-sm font-mono;
    background-color: var(--color-theme-light-muted);
    color: var(--color-theme-light);
    border-radius: 0.25rem;
    font-weight: 500;
  }

  code::before {
    content: "" !important;
  }

  code::after {
    content: "" !important;
  }

  :where(.dark, .dark *) code {
    background-color: var(--color-theme-dark-muted);
    color: var(--color-theme-dark);
  }

  /* Code block styling */
  pre {
    @apply p-4 rounded-lg overflow-x-auto;
    background-color: var(--color-theme-dark-muted);
    color: var(--color-theme-light);
  }

  :where(.dark, .dark *) pre {
    background-color: var(--color-theme-light-muted);
    color: var(--color-theme-dark);
  }

  pre code {
    @apply p-0 bg-transparent;
    color: inherit;
  }
}

/* Table styling for dark mode */
.prose table {
  @apply border-collapse;
}

.prose th,
.prose td {
  @apply border border-gray-300 dark:border-gray-600 px-4 py-2;
}

.prose th {
  @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 font-semibold;
}

.prose td {
  @apply text-gray-900 dark:text-gray-100;
}

.prose tbody tr:nth-child(even) {
  @apply bg-gray-50 dark:bg-gray-900;
}

/* GitHub alert blocks */
.markdown-alert {
  @apply border-l-4 pl-4 py-2 my-4 rounded-r;
}

.markdown-alert-note {
  @apply border-blue-500 bg-blue-50 dark:bg-blue-900/20;
}

.markdown-alert-tip {
  @apply border-green-500 bg-green-50 dark:bg-green-900/20;
}

.markdown-alert-important {
  @apply border-purple-500 bg-purple-50 dark:bg-purple-900/20;
}

.markdown-alert-warning {
  @apply border-red-500 bg-red-50 dark:bg-red-900/20;
}

.markdown-alert-caution {
  @apply border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20;
}

.markdown-alert-title {
  @apply font-semibold text-sm uppercase tracking-wide mb-1;
  color: var(--color-theme-dark);
  :where(.dark, .dark *) & {
    color: var(--color-theme-light-muted);
  }
}

.markdown-alert-title {
  display: none;
}

ul li {
  list-style-type: disc;
}

ul ul li {
  list-style-type: circle;
}

ul ul ul li {
  list-style-type: square;
}